# =====================================================
# FintechPSP - Setup Ambiente de Teste EmpresaTeste
# =====================================================

Write-Host "üéØ Preparando ambiente para testes da EmpresaTeste..." -ForegroundColor Green
Write-Host "üìã Configura√ß√£o baseada em: configuracao-empresateste.md" -ForegroundColor Cyan
Write-Host ""

# Fun√ß√£o para testar conectividade
function Test-Port {
    param([int]$Port)
    try {
        $connection = New-Object System.Net.Sockets.TcpClient
        $connection.Connect("localhost", $Port)
        $connection.Close()
        return $true
    } catch {
        return $false
    }
}

# Fun√ß√£o para aguardar servi√ßo
function Wait-ForService {
    param([string]$Name, [int]$Port, [int]$MaxWait = 60)
    
    Write-Host "‚è≥ Aguardando $Name (porta $Port)..." -ForegroundColor Yellow
    $waited = 0
    while (-not (Test-Port $Port) -and $waited -lt $MaxWait) {
        Start-Sleep -Seconds 2
        $waited += 2
        Write-Host "." -NoNewline -ForegroundColor Gray
    }
    Write-Host ""
    
    if (Test-Port $Port) {
        Write-Host "‚úÖ $Name est√° pronto!" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå $Name n√£o respondeu em ${MaxWait}s" -ForegroundColor Red
        return $false
    }
}

# 1. Parar containers existentes
Write-Host "üõë Limpando ambiente anterior..." -ForegroundColor Yellow
docker-compose -f docker-compose-complete.yml down 2>$null
docker system prune -f 2>$null

# 2. Subir infraestrutura
Write-Host "üê≥ Iniciando infraestrutura (PostgreSQL, RabbitMQ, Redis)..." -ForegroundColor Yellow
docker-compose -f docker-compose-complete.yml up -d postgres rabbitmq redis

# 3. Aguardar infraestrutura
$infraOk = $true
$infraOk = $infraOk -and (Wait-ForService "PostgreSQL" 5433)
$infraOk = $infraOk -and (Wait-ForService "RabbitMQ" 5673)
$infraOk = $infraOk -and (Wait-ForService "Redis" 6380)

if (-not $infraOk) {
    Write-Host "‚ùå Falha na infraestrutura. Verificando logs..." -ForegroundColor Red
    docker-compose -f docker-compose-complete.yml logs postgres rabbitmq redis
    exit 1
}

# 4. Executar migrations do banco
Write-Host "üóÑÔ∏è Executando migrations do banco de dados..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Verificar se PostgreSQL est√° realmente pronto
$pgReady = $false
$attempts = 0
do {
    $attempts++
    try {
        $result = docker exec fintech-postgres-new pg_isready -U postgres 2>$null
        if ($result -match "accepting connections") {
            $pgReady = $true
            break
        }
    } catch {}
    Start-Sleep -Seconds 2
} while ($attempts -lt 15)

if (-not $pgReady) {
    Write-Host "‚ùå PostgreSQL n√£o est√° pronto para conex√µes" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ PostgreSQL pronto para migrations" -ForegroundColor Green

# 5. Subir microservi√ßos essenciais
Write-Host "üöÄ Iniciando microservi√ßos..." -ForegroundColor Yellow

$services = @(
    @{Name="API Gateway"; Port=5000},
    @{Name="Auth Service"; Port=5001},
    @{Name="Company Service"; Port=5002},
    @{Name="Transaction Service"; Port=5003},
    @{Name="Balance Service"; Port=5004},
    @{Name="User Service"; Port=5006},
    @{Name="Config Service"; Port=5007},
    @{Name="Integration Service"; Port=5008},
    @{Name="Webhook Service"; Port=5005}
)

# Subir todos os servi√ßos
docker-compose -f docker-compose-complete.yml up -d

# Aguardar servi√ßos ficarem prontos
Write-Host "‚è≥ Aguardando microservi√ßos ficarem prontos..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# 6. Verificar health dos servi√ßos
Write-Host "üîç Verificando sa√∫de dos servi√ßos..." -ForegroundColor Cyan
$allHealthy = $true

foreach ($service in $services) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:$($service.Port)/health" -Method GET -TimeoutSec 10 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $($service.Name): Saud√°vel" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $($service.Name): Status $($response.StatusCode)" -ForegroundColor Yellow
            $allHealthy = $false
        }
    } catch {
        Write-Host "‚ùå $($service.Name): N√£o respondeu" -ForegroundColor Red
        $allHealthy = $false
    }
}

# 7. Subir frontends
Write-Host "üåê Iniciando frontends..." -ForegroundColor Yellow
docker-compose -f docker-compose-complete.yml up -d backoffice-web internet-banking-web

# Aguardar frontends
Start-Sleep -Seconds 15

# Verificar frontends
try {
    $backofficeHealth = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -Method GET -TimeoutSec 10 -ErrorAction SilentlyContinue
    if ($backofficeHealth.StatusCode -eq 200) {
        Write-Host "‚úÖ BackofficeWeb: Saud√°vel" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è BackofficeWeb: Ainda inicializando..." -ForegroundColor Yellow
}

try {
    $internetBankingHealth = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 10 -ErrorAction SilentlyContinue
    if ($internetBankingHealth.StatusCode -eq 200) {
        Write-Host "‚úÖ InternetBankingWeb: Saud√°vel" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è InternetBankingWeb: Ainda inicializando..." -ForegroundColor Yellow
}

# 8. Resumo do ambiente
Write-Host ""
Write-Host "üéØ AMBIENTE DE TESTE PREPARADO!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä SERVI√áOS DISPON√çVEIS:" -ForegroundColor White
Write-Host "‚Ä¢ API Gateway:          http://localhost:5000" -ForegroundColor Gray
Write-Host "‚Ä¢ BackofficeWeb:        http://localhost:3000" -ForegroundColor Gray
Write-Host "‚Ä¢ InternetBankingWeb:   http://localhost:3001" -ForegroundColor Gray
Write-Host ""
Write-Host "üè¢ DADOS DA EMPRESATESTE:" -ForegroundColor White
Write-Host "‚Ä¢ Raz√£o Social:         EmpresaTeste Ltda" -ForegroundColor Gray
Write-Host "‚Ä¢ CNPJ:                 12.345.678/0001-99" -ForegroundColor Gray
Write-Host "‚Ä¢ Email:                contato@empresateste.com" -ForegroundColor Gray
Write-Host "‚Ä¢ Usu√°rio Cliente:      cliente@empresateste.com" -ForegroundColor Gray
Write-Host ""
Write-Host "üí∞ LIMITES CONFIGURADOS:" -ForegroundColor White
Write-Host "‚Ä¢ PIX Di√°rio:           R$ 10.000,00" -ForegroundColor Gray
Write-Host "‚Ä¢ TED Di√°rio:           R$ 10.000,00" -ForegroundColor Gray
Write-Host "‚Ä¢ Boleto Di√°rio:        R$ 10.000,00" -ForegroundColor Gray
Write-Host ""
Write-Host "üîê INTEGRA√á√ÉO SICOOB:" -ForegroundColor White
Write-Host "‚Ä¢ Ambiente:             Sandbox" -ForegroundColor Gray
Write-Host "‚Ä¢ OAuth:                Configurado" -ForegroundColor Gray
Write-Host "‚Ä¢ Client ID:            9b5e603e428cc477a2841e2683c92d21" -ForegroundColor Gray
Write-Host ""
Write-Host "üìÆ TESTES DISPON√çVEIS:" -ForegroundColor White
Write-Host "‚Ä¢ Postman Collection:   postman/FintechPSP-Collection.json" -ForegroundColor Gray
Write-Host "‚Ä¢ Documenta√ß√£o:         configuracao-empresateste.md" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASSOS:" -ForegroundColor White
Write-Host "1. Importar collection do Postman" -ForegroundColor Gray
Write-Host "2. Executar testes de autentica√ß√£o" -ForegroundColor Gray
Write-Host "3. Testar cria√ß√£o de conta corrente" -ForegroundColor Gray
Write-Host "4. Executar transa√ß√£o PIX de teste" -ForegroundColor Gray
Write-Host "5. Verificar concilia√ß√£o de extrato" -ForegroundColor Gray
Write-Host ""

if ($allHealthy) {
    Write-Host "‚úÖ AMBIENTE 100% PRONTO PARA TESTES!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Alguns servi√ßos podem ainda estar inicializando..." -ForegroundColor Yellow
    Write-Host "   Aguarde mais alguns minutos e verifique novamente." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "================================================" -ForegroundColor Cyan
