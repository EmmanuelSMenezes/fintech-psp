#!/usr/bin/env pwsh

# Script para testar o ambiente Docker completo do FintechPSP
Write-Host "üê≥ TESTE DO AMBIENTE DOCKER FINTECHPSP" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Fun√ß√£o para verificar se um servi√ßo est√° respondendo
function Test-Service {
    param(
        [string]$Name,
        [string]$Url,
        [int]$MaxRetries = 30,
        [int]$DelaySeconds = 5
    )
    
    Write-Host "üîç Testando $Name..." -ForegroundColor Yellow
    
    for ($i = 1; $i -le $MaxRetries; $i++) {
        try {
            $response = Invoke-RestMethod -Uri $Url -Method GET -TimeoutSec 10 -ErrorAction Stop
            Write-Host "‚úÖ $Name est√° funcionando!" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Host "‚è≥ Tentativa $i/$MaxRetries - $Name ainda n√£o est√° pronto..." -ForegroundColor Yellow
            Start-Sleep -Seconds $DelaySeconds
        }
    }
    
    Write-Host "‚ùå $Name n√£o respondeu ap√≥s $MaxRetries tentativas" -ForegroundColor Red
    return $false
}

# Verificar se Docker est√° rodando
Write-Host "üîç Verificando Docker..." -ForegroundColor Yellow
try {
    docker version | Out-Null
    Write-Host "‚úÖ Docker est√° rodando!" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker n√£o est√° rodando. Inicie o Docker Desktop primeiro." -ForegroundColor Red
    exit 1
}

# Verificar se docker-compose est√° dispon√≠vel
Write-Host "üîç Verificando Docker Compose..." -ForegroundColor Yellow
try {
    docker-compose version | Out-Null
    Write-Host "‚úÖ Docker Compose est√° dispon√≠vel!" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Docker Compose n√£o est√° dispon√≠vel." -ForegroundColor Red
    exit 1
}

# Parar containers existentes
Write-Host "üõë Parando containers existentes..." -ForegroundColor Yellow
docker-compose -f docker-compose-complete.yml down

# Limpar imagens antigas (opcional)
Write-Host "üßπ Limpando imagens antigas..." -ForegroundColor Yellow
docker system prune -f

# Subir apenas a infraestrutura primeiro
Write-Host "üöÄ Subindo infraestrutura (PostgreSQL, RabbitMQ, Redis)..." -ForegroundColor Cyan
docker-compose -f docker-compose-complete.yml up -d postgres rabbitmq redis

# Aguardar infraestrutura ficar pronta
Write-Host "‚è≥ Aguardando infraestrutura ficar pronta..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar infraestrutura
$infraOk = $true
$infraOk = $infraOk -and (Test-Service "PostgreSQL" "http://localhost:5433" 10 3)

# Testar RabbitMQ Management
try {
    $response = Invoke-WebRequest -Uri "http://localhost:15673" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ RabbitMQ Management est√° funcionando!" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ùå RabbitMQ Management n√£o est√° respondendo" -ForegroundColor Red
    $infraOk = $false
}

# Testar Redis
try {
    $redisTest = docker exec fintech-redis redis-cli ping
    if ($redisTest -eq "PONG") {
        Write-Host "‚úÖ Redis est√° funcionando!" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ùå Redis n√£o est√° respondendo" -ForegroundColor Red
    $infraOk = $false
}

if (-not $infraOk) {
    Write-Host "‚ùå Infraestrutura n√£o est√° funcionando corretamente. Verifique os logs:" -ForegroundColor Red
    Write-Host "docker-compose -f docker-compose-complete.yml logs" -ForegroundColor Yellow
    exit 1
}

# Subir os microservi√ßos
Write-Host "üöÄ Subindo microservi√ßos..." -ForegroundColor Cyan
docker-compose -f docker-compose-complete.yml up -d auth-service user-service config-service company-service

# Aguardar microservi√ßos b√°sicos
Write-Host "‚è≥ Aguardando microservi√ßos b√°sicos..." -ForegroundColor Yellow
Start-Sleep -Seconds 45

# Testar microservi√ßos b√°sicos
$servicesOk = $true
$servicesOk = $servicesOk -and (Test-Service "AuthService" "http://localhost:5001/health")
$servicesOk = $servicesOk -and (Test-Service "UserService" "http://localhost:5006/health")
$servicesOk = $servicesOk -and (Test-Service "ConfigService" "http://localhost:5007/health")
$servicesOk = $servicesOk -and (Test-Service "CompanyService" "http://localhost:5010/health")

if (-not $servicesOk) {
    Write-Host "‚ùå Microservi√ßos b√°sicos n√£o est√£o funcionando. Verifique os logs." -ForegroundColor Red
    exit 1
}

# Subir servi√ßos de neg√≥cio
Write-Host "üöÄ Subindo servi√ßos de neg√≥cio..." -ForegroundColor Cyan
docker-compose -f docker-compose-complete.yml up -d balance-service transaction-service integration-service webhook-service

# Aguardar servi√ßos de neg√≥cio
Write-Host "‚è≥ Aguardando servi√ßos de neg√≥cio..." -ForegroundColor Yellow
Start-Sleep -Seconds 45

# Testar servi√ßos de neg√≥cio
$businessOk = $true
$businessOk = $businessOk -and (Test-Service "BalanceService" "http://localhost:5003/health")
$businessOk = $businessOk -and (Test-Service "TransactionService" "http://localhost:5004/health")
$businessOk = $businessOk -and (Test-Service "IntegrationService" "http://localhost:5005/health")
$businessOk = $businessOk -and (Test-Service "WebhookService" "http://localhost:5008/health")

if (-not $businessOk) {
    Write-Host "‚ùå Servi√ßos de neg√≥cio n√£o est√£o funcionando. Verifique os logs." -ForegroundColor Red
    exit 1
}

# Subir API Gateway
Write-Host "üöÄ Subindo API Gateway..." -ForegroundColor Cyan
docker-compose -f docker-compose-complete.yml up -d api-gateway

# Aguardar API Gateway
Write-Host "‚è≥ Aguardando API Gateway..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Testar API Gateway
if (-not (Test-Service "API Gateway" "http://localhost:5000/health")) {
    Write-Host "‚ùå API Gateway n√£o est√° funcionando. Verifique os logs." -ForegroundColor Red
    exit 1
}

# Subir frontends
Write-Host "üöÄ Subindo frontends..." -ForegroundColor Cyan
docker-compose -f docker-compose-complete.yml up -d backoffice-web internet-banking-web

# Aguardar frontends
Write-Host "‚è≥ Aguardando frontends..." -ForegroundColor Yellow
Start-Sleep -Seconds 60

# Testar frontends
$frontendsOk = $true
$frontendsOk = $frontendsOk -and (Test-Service "BackofficeWeb" "http://localhost:3000")
$frontendsOk = $frontendsOk -and (Test-Service "InternetBankingWeb" "http://localhost:3001")

# Teste funcional b√°sico
Write-Host "üß™ Executando teste funcional b√°sico..." -ForegroundColor Cyan

# Teste de login
try {
    $loginBody = @{
        email = "admin@fintechpsp.com"
        password = "admin123"
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri "http://localhost:5000/auth/login" -Method POST -Body $loginBody -ContentType "application/json"
    
    if ($loginResponse.accessToken) {
        Write-Host "‚úÖ Teste de login funcionando!" -ForegroundColor Green
        
        # Teste de consulta de saldo
        $headers = @{ Authorization = "Bearer $($loginResponse.accessToken)" }
        try {
            $balanceResponse = Invoke-RestMethod -Uri "http://localhost:5000/saldo/a4f53c31-87fd-4c24-924b-8c9ef4ebf905" -Method GET -Headers $headers
            Write-Host "‚úÖ Teste de consulta de saldo funcionando!" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è Teste de saldo falhou, mas sistema est√° funcionando" -ForegroundColor Yellow
        }
    }
}
catch {
    Write-Host "‚ö†Ô∏è Teste de login falhou, mas sistema pode estar funcionando" -ForegroundColor Yellow
}

# Mostrar status final
Write-Host ""
Write-Host "üéâ AMBIENTE DOCKER TESTADO!" -ForegroundColor Green
Write-Host "============================" -ForegroundColor Green
Write-Host ""
Write-Host "üìä Status dos Servi√ßos:" -ForegroundColor Cyan
Write-Host "‚Ä¢ PostgreSQL: http://localhost:5433" -ForegroundColor White
Write-Host "‚Ä¢ RabbitMQ Management: http://localhost:15673" -ForegroundColor White
Write-Host "‚Ä¢ Redis: localhost:6380" -ForegroundColor White
Write-Host "‚Ä¢ API Gateway: http://localhost:5000" -ForegroundColor White
Write-Host "‚Ä¢ AuthService: http://localhost:5001" -ForegroundColor White
Write-Host "‚Ä¢ BalanceService: http://localhost:5003" -ForegroundColor White
Write-Host "‚Ä¢ TransactionService: http://localhost:5004" -ForegroundColor White
Write-Host "‚Ä¢ IntegrationService: http://localhost:5005" -ForegroundColor White
Write-Host "‚Ä¢ UserService: http://localhost:5006" -ForegroundColor White
Write-Host "‚Ä¢ ConfigService: http://localhost:5007" -ForegroundColor White
Write-Host "‚Ä¢ WebhookService: http://localhost:5008" -ForegroundColor White
Write-Host "‚Ä¢ CompanyService: http://localhost:5010" -ForegroundColor White
Write-Host "‚Ä¢ BackofficeWeb: http://localhost:3000" -ForegroundColor White
Write-Host "‚Ä¢ InternetBankingWeb: http://localhost:3001" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Ver logs: docker-compose -f docker-compose-complete.yml logs -f" -ForegroundColor Yellow
Write-Host "‚Ä¢ Parar tudo: docker-compose -f docker-compose-complete.yml down" -ForegroundColor Yellow
Write-Host "‚Ä¢ Status: docker ps" -ForegroundColor Yellow
Write-Host ""
Write-Host "‚úÖ Ambiente pronto para uso!" -ForegroundColor Green
