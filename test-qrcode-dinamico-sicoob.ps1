# ========================================
# Teste Integrado QR Code Din√¢mico Sicoob
# ========================================
# Este script testa todo o fluxo desde a cria√ß√£o da transa√ß√£o PIX
# at√© a gera√ß√£o do QR Code din√¢mico via integra√ß√£o Sicoob

param(
    [string]$BaseUrl = "http://localhost:5000",
    [string]$IntegrationUrl = "http://localhost:5005",
    [string]$TransactionUrl = "http://localhost:5002",
    [decimal]$Amount = 10.50,
    [string]$PixKey = "user@example.com",
    [string]$Description = "Teste QR Code Din√¢mico Sicoob"
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Headers padr√£o
$headers = @{
    "Content-Type" = "application/json"
    "Accept" = "application/json"
}

Write-Host "üöÄ INICIANDO TESTE INTEGRADO QR CODE DIN√ÇMICO SICOOB" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para fazer requisi√ß√µes HTTP com tratamento de erro
function Invoke-ApiRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
        }
        
        if ($Body) {
            $params.Body = $Body
        }
        
        $response = Invoke-RestMethod @params
        return $response
    }
    catch {
        Write-Host "‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
        if ($_.Exception.Response) {
            $statusCode = $_.Exception.Response.StatusCode
            Write-Host "   Status Code: $statusCode" -ForegroundColor Red
        }
        throw
    }
}

# Fun√ß√£o para aguardar servi√ßos
function Wait-ForService {
    param(
        [string]$Url,
        [string]$ServiceName,
        [int]$MaxAttempts = 30
    )
    
    Write-Host "‚è≥ Aguardando $ServiceName estar dispon√≠vel..." -ForegroundColor Yellow
    
    for ($i = 1; $i -le $MaxAttempts; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "$Url/health" -Method GET -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $ServiceName est√° dispon√≠vel!" -ForegroundColor Green
                return $true
            }
        }
        catch {
            Write-Host "   Tentativa $i/$MaxAttempts - $ServiceName n√£o dispon√≠vel ainda..." -ForegroundColor Gray
            Start-Sleep -Seconds 2
        }
    }
    
    Write-Host "‚ùå $ServiceName n√£o ficou dispon√≠vel ap√≥s $MaxAttempts tentativas" -ForegroundColor Red
    return $false
}

try {
    # ========================================
    # ETAPA 1: Verificar se os servi√ßos est√£o rodando
    # ========================================
    Write-Host "üìã ETAPA 1: Verificando disponibilidade dos servi√ßos" -ForegroundColor Cyan
    Write-Host ""
    
    $services = @(
        @{ Name = "API Gateway"; Url = $BaseUrl },
        @{ Name = "Transaction Service"; Url = $TransactionUrl },
        @{ Name = "Integration Service"; Url = $IntegrationUrl }
    )
    
    foreach ($service in $services) {
        if (-not (Wait-ForService -Url $service.Url -ServiceName $service.Name)) {
            throw "Servi√ßo $($service.Name) n√£o est√° dispon√≠vel"
        }
    }
    
    Write-Host ""
    
    # ========================================
    # ETAPA 2: Obter token de autentica√ß√£o
    # ========================================
    Write-Host "üîê ETAPA 2: Obtendo token de autentica√ß√£o" -ForegroundColor Cyan
    Write-Host ""
    
    $authRequest = @{
        grant_type = "client_credentials"
        client_id = "test-client"
        client_secret = "test-secret"
        scope = "transactions"
    } | ConvertTo-Json
    
    try {
        $authResponse = Invoke-ApiRequest -Url "$BaseUrl/auth/token" -Method POST -Headers $headers -Body $authRequest
        $token = $authResponse.access_token
        
        # Adicionar token aos headers
        $headers["Authorization"] = "Bearer $token"
        
        Write-Host "‚úÖ Token obtido com sucesso!" -ForegroundColor Green
        Write-Host "   Token: $($token.Substring(0, 20))..." -ForegroundColor Gray
    }
    catch {
        Write-Host "‚ö†Ô∏è  Falha na autentica√ß√£o, continuando sem token..." -ForegroundColor Yellow
    }
    
    Write-Host ""
    
    # ========================================
    # ETAPA 3: Criar transa√ß√£o PIX din√¢mica
    # ========================================
    Write-Host "üí∞ ETAPA 3: Criando transa√ß√£o PIX din√¢mica" -ForegroundColor Cyan
    Write-Host ""
    
    $externalId = "TEST-QR-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    
    $pixRequest = @{
        externalId = $externalId
        amount = $Amount
        pixKey = $PixKey
        bankCode = "756"  # C√≥digo do Sicoob
        description = $Description
        expiresIn = 300   # 5 minutos
    } | ConvertTo-Json
    
    Write-Host "üì§ Enviando requisi√ß√£o para criar QR Code din√¢mico..." -ForegroundColor Yellow
    Write-Host "   External ID: $externalId" -ForegroundColor Gray
    Write-Host "   Valor: R$ $Amount" -ForegroundColor Gray
    Write-Host "   PIX Key: $PixKey" -ForegroundColor Gray
    Write-Host "   Banco: Sicoob (756)" -ForegroundColor Gray
    Write-Host ""
    
    $qrResponse = Invoke-ApiRequest -Url "$TransactionUrl/transacoes/pix/qrcode/dinamico" -Method POST -Headers $headers -Body $pixRequest
    
    Write-Host "‚úÖ QR Code din√¢mico criado com sucesso!" -ForegroundColor Green
    Write-Host "   Transaction ID: $($qrResponse.transactionId)" -ForegroundColor Gray
    Write-Host "   Tipo: $($qrResponse.type)" -ForegroundColor Gray
    Write-Host "   Expira em: $($qrResponse.expiresAt)" -ForegroundColor Gray
    Write-Host "   PIX Copia e Cola: $($qrResponse.qrcodePayload.Length) caracteres" -ForegroundColor Gray
    Write-Host ""
    
    # ========================================
    # ETAPA 4: Testar integra√ß√£o Sicoob PIX Cobran√ßa
    # ========================================
    Write-Host "üè¶ ETAPA 4: Testando integra√ß√£o Sicoob PIX Cobran√ßa" -ForegroundColor Cyan
    Write-Host ""
    
    $cobrancaRequest = @{
        chave = $PixKey
        valor = @{
            original = $Amount.ToString("F2", [System.Globalization.CultureInfo]::InvariantCulture)
        }
        calendario = @{
            expiracao = 300
        }
        devedor = @{
            nome = "Emmanuel Santos Menezes"
            cpf = "39745467820"
        }
        solicitacaoPagador = $Description
        infoAdicionais = @(
            @{
                nome = "ExternalId"
                valor = $externalId
            }
        )
    } | ConvertTo-Json -Depth 10
    
    Write-Host "üì§ Criando cobran√ßa PIX no Sicoob..." -ForegroundColor Yellow
    
    $cobrancaResponse = Invoke-ApiRequest -Url "$IntegrationUrl/integrations/sicoob/pix/cobranca" -Method POST -Headers $headers -Body $cobrancaRequest
    
    Write-Host "‚úÖ Cobran√ßa PIX criada no Sicoob!" -ForegroundColor Green
    Write-Host "   TxId: $($cobrancaResponse.txId)" -ForegroundColor Gray
    Write-Host "   Status: $($cobrancaResponse.status)" -ForegroundColor Gray
    Write-Host "   Provider: $($cobrancaResponse.provider)" -ForegroundColor Gray
    
    if ($cobrancaResponse.pixCopiaECola) {
        Write-Host "   PIX Copia e Cola: $($cobrancaResponse.pixCopiaECola.Length) caracteres" -ForegroundColor Gray
    }
    
    if ($cobrancaResponse.qrcode) {
        Write-Host "   QR Code: Presente" -ForegroundColor Gray
    }
    
    Write-Host ""
    
    # ========================================
    # ETAPA 5: Testar endpoint espec√≠fico de QR Code
    # ========================================
    Write-Host "üéØ ETAPA 5: Testando endpoint espec√≠fico de QR Code Sicoob" -ForegroundColor Cyan
    Write-Host ""
    
    $qrCodeRequest = @{
        txId = $cobrancaResponse.txId
        chave = $PixKey
        valor = $Amount
    } | ConvertTo-Json
    
    Write-Host "üì§ Solicitando QR Code espec√≠fico do Sicoob..." -ForegroundColor Yellow
    
    try {
        $qrCodeResponse = Invoke-ApiRequest -Url "$IntegrationUrl/integrations/sicoob/cobranca/v3/qrcode" -Method POST -Headers $headers -Body $qrCodeRequest
        
        Write-Host "‚úÖ QR Code espec√≠fico obtido!" -ForegroundColor Green
        Write-Host "   TxId: $($qrCodeResponse.txid)" -ForegroundColor Gray
        Write-Host "   Tipo: $($qrCodeResponse.type)" -ForegroundColor Gray
        Write-Host "   Provider: $($qrCodeResponse.provider)" -ForegroundColor Gray
        
        if ($qrCodeResponse.pixCopiaECola) {
            Write-Host "   PIX Copia e Cola: $($qrCodeResponse.pixCopiaECola.Length) caracteres" -ForegroundColor Gray
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  Endpoint espec√≠fico de QR Code n√£o dispon√≠vel, mas cobran√ßa foi criada com sucesso" -ForegroundColor Yellow
    }
    
    Write-Host ""
    
    # ========================================
    # ETAPA 6: Validar dados do QR Code
    # ========================================
    Write-Host "üîç ETAPA 6: Validando dados do QR Code gerado" -ForegroundColor Cyan
    Write-Host ""
    
    $pixCopiaECola = $cobrancaResponse.pixCopiaECola
    if ($pixCopiaECola) {
        Write-Host "üìã An√°lise do PIX Copia e Cola:" -ForegroundColor Yellow
        Write-Host "   Tamanho: $($pixCopiaECola.Length) caracteres" -ForegroundColor Gray
        Write-Host "   Formato: $($pixCopiaECola.Substring(0, 20))..." -ForegroundColor Gray
        
        # Valida√ß√µes b√°sicas do formato EMV
        if ($pixCopiaECola.StartsWith("00020")) {
            Write-Host "   ‚úÖ Formato EMV v√°lido (inicia com 00020)" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Formato EMV inv√°lido" -ForegroundColor Red
        }
        
        if ($pixCopiaECola.Contains("br.gov.bcb.pix")) {
            Write-Host "   ‚úÖ Cont√©m identificador PIX brasileiro" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå N√£o cont√©m identificador PIX brasileiro" -ForegroundColor Red
        }
        
        if ($pixCopiaECola.Length -ge 100 -and $pixCopiaECola.Length -le 512) {
            Write-Host "   ‚úÖ Tamanho dentro do esperado (100-512 caracteres)" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Tamanho fora do padr√£o esperado" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå PIX Copia e Cola n√£o foi gerado" -ForegroundColor Red
    }
    
    Write-Host ""
    
    # ========================================
    # RESUMO FINAL
    # ========================================
    Write-Host "üìä RESUMO DO TESTE" -ForegroundColor Green
    Write-Host "==================" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ Servi√ßos verificados e dispon√≠veis" -ForegroundColor Green
    Write-Host "‚úÖ QR Code din√¢mico criado no TransactionService" -ForegroundColor Green
    Write-Host "‚úÖ Cobran√ßa PIX criada no Sicoob via IntegrationService" -ForegroundColor Green
    Write-Host "‚úÖ PIX Copia e Cola gerado com sucesso" -ForegroundColor Green
    Write-Host ""
    Write-Host "üéØ DADOS FINAIS:" -ForegroundColor Cyan
    Write-Host "   External ID: $externalId" -ForegroundColor Gray
    Write-Host "   Transaction ID: $($qrResponse.transactionId)" -ForegroundColor Gray
    Write-Host "   Sicoob TxId: $($cobrancaResponse.txId)" -ForegroundColor Gray
    Write-Host "   Valor: R$ $Amount" -ForegroundColor Gray
    Write-Host "   PIX Key: $PixKey" -ForegroundColor Gray
    Write-Host "   Status: $($cobrancaResponse.status)" -ForegroundColor Gray
    Write-Host ""
    Write-Host "üîó PIX COPIA E COLA:" -ForegroundColor Cyan
    Write-Host "$pixCopiaECola" -ForegroundColor White
    Write-Host ""
    Write-Host "üéâ TESTE CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
    
}
catch {
    Write-Host ""
    Write-Host "‚ùå ERRO DURANTE O TESTE:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Write-Host ""
    Write-Host "üîç Verifique se:" -ForegroundColor Yellow
    Write-Host "   - Os servi√ßos est√£o rodando (docker-compose up)" -ForegroundColor Yellow
    Write-Host "   - As configura√ß√µes do Sicoob est√£o corretas" -ForegroundColor Yellow
    Write-Host "   - Os certificados est√£o no local correto" -ForegroundColor Yellow
    Write-Host "   - A conectividade com o Sicoob est√° funcionando" -ForegroundColor Yellow
    
    exit 1
}
