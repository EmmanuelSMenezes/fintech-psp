{
  "info": {
    "name": "FintechPSP - Testes Completos",
    "description": "Collection completa para testes do FintechPSP - BackofficeWeb, InternetBankingWeb e APIs de Cliente",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "client_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "oauth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "company_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script",
          "pm.globals.set('timestamp', Date.now());",
          "pm.globals.set('uuid', pm.variables.replaceIn('{{$guid}}'));",
          "",
          "// Fun√ß√£o para gerar CPF v√°lido",
          "function generateCPF() {",
          "    const cpf = [];",
          "    for (let i = 0; i < 9; i++) {",
          "        cpf.push(Math.floor(Math.random() * 9));",
          "    }",
          "    let sum = 0;",
          "    for (let i = 0; i < 9; i++) {",
          "        sum += cpf[i] * (10 - i);",
          "    }",
          "    cpf.push(11 - (sum % 11) > 9 ? 0 : 11 - (sum % 11));",
          "    sum = 0;",
          "    for (let i = 0; i < 10; i++) {",
          "        sum += cpf[i] * (11 - i);",
          "    }",
          "    cpf.push(11 - (sum % 11) > 9 ? 0 : 11 - (sum % 11));",
          "    return cpf.join('');",
          "}",
          "",
          "pm.globals.set('test_cpf', generateCPF());",
          "",
          "console.log('üöÄ Executando:', pm.request.method, pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Test Script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "// Coletar m√©tricas",
          "const metrics = {",
          "    endpoint: pm.request.url.toString(),",
          "    method: pm.request.method,",
          "    responseTime: pm.response.responseTime,",
          "    statusCode: pm.response.code,",
          "    timestamp: new Date().toISOString()",
          "};",
          "",
          "const existingMetrics = JSON.parse(pm.environment.get('performance_metrics') || '[]');",
          "existingMetrics.push(metrics);",
          "pm.environment.set('performance_metrics', JSON.stringify(existingMetrics));"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "01 - BackofficeWeb APIs",
      "item": [
        {
          "name": "1.1 - Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.collectionVariables.set('admin_token', jsonData.accessToken);",
                  "});",
                  "",
                  "pm.test('User is admin', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('Admin');",
                  "});",
                  "",
                  "pm.test('JWT Token Validation', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        const token = response.accessToken;",
                  "        const parts = token.split('.');",
                  "        pm.expect(parts).to.have.lengthOf(3);",
                  "        const payload = JSON.parse(atob(parts[1]));",
                  "        pm.expect(payload).to.have.property('iss', 'Mortadela');",
                  "        pm.expect(payload).to.have.property('aud', 'Mortadela');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@fintechpsp.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "1.2 - Listar Empresas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Companies have required fields', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('razaoSocial');",
                  "        pm.expect(jsonData[0]).to.have.property('cnpj');",
                  "        pm.expect(jsonData[0]).to.have.property('status');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/companies",
              "host": ["{{base_url}}"],
              "path": ["companies"]
            }
          }
        },
        {
          "name": "1.3 - Criar Empresa",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = Date.now();",
                  "pm.collectionVariables.set('test_timestamp', timestamp);",
                  "pm.collectionVariables.set('test_company_cnpj', `12.345.678/000${timestamp.toString().slice(-1)}-99`);",
                  "pm.collectionVariables.set('test_company_email', `empresa${timestamp}@teste.com`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Company created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set('company_id', jsonData.id);",
                  "    pm.expect(jsonData.razaoSocial).to.include('Empresa Teste Postman');",
                  "    pm.expect(jsonData.status).to.eql('PendingDocuments');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"razaoSocial\": \"Empresa Teste Postman {{test_timestamp}} Ltda\",\n  \"nomeFantasia\": \"Teste Postman {{test_timestamp}}\",\n  \"cnpj\": \"{{test_company_cnpj}}\",\n  \"inscricaoEstadual\": \"123456789\",\n  \"address\": {\n    \"cep\": \"01234-567\",\n    \"logradouro\": \"Rua Teste\",\n    \"numero\": \"123\",\n    \"bairro\": \"Centro\",\n    \"cidade\": \"S√£o Paulo\",\n    \"estado\": \"SP\",\n    \"pais\": \"Brasil\"\n  },\n  \"telefone\": \"(11) 99999-9999\",\n  \"email\": \"{{test_company_email}}\",\n  \"contractData\": {\n    \"capitalSocial\": 100000.00,\n    \"dataConstituicao\": \"2024-01-01\",\n    \"naturezaJuridica\": \"Sociedade Limitada\",\n    \"atividadePrincipal\": \"Desenvolvimento de Software\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/companies",
              "host": ["{{base_url}}"],
              "path": ["companies"]
            }
          }
        },
        {
          "name": "1.4 - Aprovar Empresa",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Company approved', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('Approved');",
                  "    pm.expect(jsonData).to.have.property('approvedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"observacoes\": \"Empresa aprovada via teste Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/companies/{{company_id}}/approve",
              "host": ["{{base_url}}"],
              "path": ["companies", "{{company_id}}", "approve"]
            }
          }
        },
        {
          "name": "1.5 - Criar Usu√°rio Cliente",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = Date.now();",
                  "pm.collectionVariables.set('test_client_email', `cliente.postman.${timestamp}@teste.com`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set('user_id', jsonData.id);",
                  "    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('test_client_email'));",
                  "    pm.expect(jsonData.role).to.eql('cliente');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Cliente Teste Postman\",\n  \"email\": \"{{test_client_email}}\",\n  \"password\": \"123456\",\n  \"role\": \"cliente\",\n  \"isActive\": true,\n  \"document\": \"{{test_cpf}}\",\n  \"phone\": \"(11) 98765-4321\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/users",
              "host": ["{{base_url}}"],
              "path": ["admin", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "02 - InternetBankingWeb APIs",
      "item": [
        {
          "name": "2.1 - Login Cliente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client login successful', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.collectionVariables.set('client_token', jsonData.accessToken);",
                  "    pm.expect(jsonData.user.role).to.eql('cliente');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_client_email}}\",\n  \"password\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "2.2 - Dados do Cliente (/client-users/me)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data returned', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('test_client_email'));",
                  "});",
                  "",
                  "pm.test('Sensitive data not exposed', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('password');",
                  "    pm.expect(jsonData).to.not.have.property('passwordHash');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{client_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/client-users/me",
              "host": ["{{base_url}}"],
              "path": ["client-users", "me"]
            }
          }
        },
        {
          "name": "2.3 - Gerar QR Code PIX Din√¢mico",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('QR Code created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('emvCode');",
                  "    pm.expect(jsonData.amount).to.eql(150.75);",
                  "    pm.expect(jsonData.type).to.eql('DYNAMIC');",
                  "});",
                  "",
                  "pm.test('PIX EMV Code Validation', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.emvCode) {",
                  "        pm.expect(jsonData.emvCode.length).to.be.at.least(200);",
                  "        pm.expect(jsonData.emvCode).to.match(/^[0-9A-Z\\s]+$/);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{client_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"externalId\": \"QR-POSTMAN-{{$timestamp}}\",\n  \"amount\": 150.75,\n  \"pixKey\": \"12345678901\",\n  \"bankCode\": \"SICOOB\",\n  \"description\": \"Teste QR Code Postman\",\n  \"expiresIn\": 3600\n}"
            },
            "url": {
              "raw": "{{base_url}}/transacoes/pix/qrcode/dinamico",
              "host": ["{{base_url}}"],
              "path": ["transacoes", "pix", "qrcode", "dinamico"]
            }
          }
        },
        {
          "name": "2.4 - Listar Transa√ß√µes PIX",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transactions list returned', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('transactionId');",
                  "        pm.expect(jsonData[0]).to.have.property('type');",
                  "        pm.expect(jsonData[0]).to.have.property('status');",
                  "        pm.expect(jsonData[0]).to.have.property('amount');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{client_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transacoes/pix?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["transacoes", "pix"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "03 - Client Integration APIs",
      "item": [
        {
          "name": "3.1 - OAuth 2.0 Client Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('OAuth token received', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('token_type');",
                  "    pm.expect(jsonData.token_type).to.eql('Bearer');",
                  "    pm.collectionVariables.set('oauth_token', jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"client_credentials\",\n  \"client_id\": \"cliente_banking\",\n  \"client_secret\": \"cliente_secret_000\",\n  \"scope\": \"banking pix\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/token",
              "host": ["{{base_url}}"],
              "path": ["auth", "token"]
            }
          }
        },
        {
          "name": "3.2 - Criar Transa√ß√£o PIX (Cliente Externo)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('PIX transaction created', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transactionId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('PENDING');",
                  "    pm.collectionVariables.set('transaction_id', jsonData.transactionId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{oauth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"externalId\": \"TXN-CLIENT-{{$timestamp}}\",\n  \"amount\": 250.00,\n  \"currency\": \"BRL\",\n  \"pixKey\": \"cliente@empresa.com\",\n  \"description\": \"Pagamento via API externa\",\n  \"webhookUrl\": \"https://webhook.site/your-webhook-id\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/transactions/pix",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "transactions", "pix"]
            }
          }
        }
      ]
    }
  ]
}
