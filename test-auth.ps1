# Teste de Autentica√ß√£o - FintechPSP
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  TESTE DE AUTENTICA√á√ÉO - ADMIN LOGIN   " -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Configurar dados de login
$loginUrl = "http://localhost:5001/auth/login"
$headers = @{
    'Content-Type' = 'application/json'
    'Accept' = 'application/json'
}

$loginData = @{
    email = "admin@fintechpsp.com"
    password = "admin123"
}

$jsonBody = $loginData | ConvertTo-Json

Write-Host "üì§ REQUEST:" -ForegroundColor Yellow
Write-Host "URL: $loginUrl" -ForegroundColor White
Write-Host "Method: POST" -ForegroundColor White
Write-Host "Headers: Content-Type: application/json" -ForegroundColor White
Write-Host "Body: $jsonBody" -ForegroundColor White
Write-Host ""

try {
    Write-Host "üîÑ Enviando requisi√ß√£o..." -ForegroundColor Yellow
    
    $response = Invoke-RestMethod -Uri $loginUrl -Method POST -Body $jsonBody -Headers $headers -TimeoutSec 15
    
    Write-Host "üì• RESPONSE:" -ForegroundColor Green
    Write-Host "‚úÖ Status: 200 OK" -ForegroundColor Green
    Write-Host "üîë Access Token: $($response.accessToken.Substring(0,50))..." -ForegroundColor Green
    Write-Host "üë§ User Email: $($response.user.email)" -ForegroundColor Green
    Write-Host "üé≠ User Role: $($response.user.role)" -ForegroundColor Green
    Write-Host "‚è∞ Expires In: $($response.expiresIn) seconds" -ForegroundColor Green
    Write-Host ""
    
    # Salvar token para pr√≥ximos testes
    $global:authToken = $response.accessToken
    $global:currentUser = $response.user
    
    Write-Host "‚úÖ LOGIN ADMIN - SUCESSO!" -ForegroundColor Green
    Write-Host "üîê Token JWT v√°lido obtido" -ForegroundColor Green
    Write-Host ""
    
    # Testar token em endpoint protegido
    Write-Host "üîç Testando token em endpoint protegido..." -ForegroundColor Yellow
    
    $authHeaders = @{
        'Authorization' = "Bearer $($response.accessToken)"
        'Accept' = 'application/json'
    }
    
    try {
        $profileResponse = Invoke-RestMethod -Uri "http://localhost:5001/auth/profile" -Headers $authHeaders -TimeoutSec 10
        Write-Host "‚úÖ Token v√°lido - Profile endpoint acess√≠vel" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Profile endpoint n√£o dispon√≠vel: $($_.Exception.Message)" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "üéâ AUTENTICA√á√ÉO ADMIN FUNCIONANDO CORRETAMENTE!" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå LOGIN ADMIN - FALHOU!" -ForegroundColor Red
    Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
    
    if ($_.Exception.Response) {
        Write-Host "Status Code: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
        Write-Host "Status Description: $($_.Exception.Response.StatusDescription)" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üîß Verificar se AuthService est√° rodando na porta 5001" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
