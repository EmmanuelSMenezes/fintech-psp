# =====================================================
# FintechPSP - Teste de Configura√ß√£o EmpresaTeste
# =====================================================

Write-Host "üéØ Testando configura√ß√£o da EmpresaTeste..." -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-ApiTest {
    param(
        [string]$Name,
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    Write-Host "üîç Testando: $Name" -ForegroundColor Cyan
    Write-Host "   URL: $Url" -ForegroundColor Gray
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            TimeoutSec = 10
            ErrorAction = 'Stop'
        }
        
        if ($Body) {
            $params.Body = $Body
            $params.ContentType = "application/json"
        }
        
        $response = Invoke-RestMethod @params
        Write-Host "   ‚úÖ Status: OK" -ForegroundColor Green
        
        if ($response -is [string]) {
            Write-Host "   üìÑ Response: $response" -ForegroundColor Gray
        } else {
            Write-Host "   üìÑ Response: $($response | ConvertTo-Json -Depth 2 -Compress)" -ForegroundColor Gray
        }
        
        return $true
    }
    catch {
        Write-Host "   ‚ùå Erro: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
    
    Write-Host ""
}

# 1. Testar Health dos Servi√ßos Principais
Write-Host "üè• TESTANDO HEALTH DOS SERVI√áOS" -ForegroundColor Yellow
Write-Host "================================" -ForegroundColor Yellow

$services = @(
    @{Name="API Gateway"; Url="http://localhost:5000/health"},
    @{Name="Auth Service"; Url="http://localhost:5001/health"},
    @{Name="Company Service"; Url="http://localhost:5009/health"},
    @{Name="User Service"; Url="http://localhost:5006/health"},
    @{Name="Transaction Service"; Url="http://localhost:5002/health"},
    @{Name="Balance Service"; Url="http://localhost:5003/health"},
    @{Name="Config Service"; Url="http://localhost:5007/health"},
    @{Name="Integration Service"; Url="http://localhost:5005/health"},
    @{Name="Webhook Service"; Url="http://localhost:5004/health"}
)

$healthyServices = 0
foreach ($service in $services) {
    if (Invoke-ApiTest -Name $service.Name -Url $service.Url) {
        $healthyServices++
    }
}

Write-Host "üìä Servi√ßos Saud√°veis: $healthyServices/$($services.Count)" -ForegroundColor White
Write-Host ""

# 2. Testar Frontends
Write-Host "üåê TESTANDO FRONTENDS" -ForegroundColor Yellow
Write-Host "=====================" -ForegroundColor Yellow

Invoke-ApiTest -Name "BackofficeWeb" -Url "http://localhost:3000/api/health"
Invoke-ApiTest -Name "InternetBankingWeb" -Url "http://localhost:3001/api/health"

# 3. Testar Configura√ß√µes da EmpresaTeste
Write-Host "üè¢ TESTANDO CONFIGURA√á√ïES EMPRESATESTE" -ForegroundColor Yellow
Write-Host "======================================" -ForegroundColor Yellow

# Buscar empresa por CNPJ
Invoke-ApiTest -Name "Buscar EmpresaTeste por CNPJ" -Url "http://localhost:5000/api/companies?cnpj=12.345.678/0001-99"

# Buscar empresa por nome
Invoke-ApiTest -Name "Buscar EmpresaTeste por nome" -Url "http://localhost:5000/api/companies?search=EmpresaTeste"

# Testar limites PIX
Invoke-ApiTest -Name "Consultar Limites PIX" -Url "http://localhost:5007/api/limits/pix"

# Testar limites TED
Invoke-ApiTest -Name "Consultar Limites TED" -Url "http://localhost:5007/api/limits/ted"

# 4. Testar Integra√ß√£o Sicoob
Write-Host "üè¶ TESTANDO INTEGRA√á√ÉO SICOOB" -ForegroundColor Yellow
Write-Host "=============================" -ForegroundColor Yellow

# Health da integra√ß√£o
Invoke-ApiTest -Name "Health Integra√ß√£o Sicoob" -Url "http://localhost:5005/api/integration/health"

# Teste de conectividade Sicoob
Invoke-ApiTest -Name "Teste Conectividade Sicoob" -Url "http://localhost:5005/api/integration/sicoob/test"

# 5. Resumo Final
Write-Host "üìã RESUMO DO AMBIENTE" -ForegroundColor Green
Write-Host "=====================" -ForegroundColor Green
Write-Host ""
Write-Host "‚úÖ SERVI√áOS ATIVOS:" -ForegroundColor White
Write-Host "‚Ä¢ API Gateway:          http://localhost:5000" -ForegroundColor Gray
Write-Host "‚Ä¢ BackofficeWeb:        http://localhost:3000" -ForegroundColor Gray
Write-Host "‚Ä¢ InternetBankingWeb:   http://localhost:3001" -ForegroundColor Gray
Write-Host "‚Ä¢ Status Page:          http://localhost:3000/status" -ForegroundColor Gray
Write-Host ""
Write-Host "üè¢ EMPRESATESTE CONFIGURADA:" -ForegroundColor White
Write-Host "‚Ä¢ CNPJ:                 12.345.678/0001-99" -ForegroundColor Gray
Write-Host "‚Ä¢ Usu√°rio:              cliente@empresateste.com" -ForegroundColor Gray
Write-Host "‚Ä¢ Limites PIX/TED:      R$ 10.000,00/dia" -ForegroundColor Gray
Write-Host "‚Ä¢ Integra√ß√£o Sicoob:    Sandbox configurado" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS TESTES SUGERIDOS:" -ForegroundColor White
Write-Host "1. Acessar Status Page: http://localhost:3000/status" -ForegroundColor Gray
Write-Host "2. Testar autentica√ß√£o no BackofficeWeb" -ForegroundColor Gray
Write-Host "3. Criar conta corrente para EmpresaTeste" -ForegroundColor Gray
Write-Host "4. Executar transa√ß√£o PIX de teste" -ForegroundColor Gray
Write-Host "5. Verificar concilia√ß√£o com Sicoob" -ForegroundColor Gray
Write-Host ""

if ($healthyServices -eq $services.Count) {
    Write-Host "üéâ AMBIENTE 100% PRONTO PARA TESTES!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Alguns servi√ßos podem precisar de mais tempo para inicializar" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìö DOCUMENTA√á√ÉO DISPON√çVEL:" -ForegroundColor Cyan
Write-Host "‚Ä¢ configuracao-empresateste.md" -ForegroundColor Gray
Write-Host "‚Ä¢ criacao-conta-empresateste.md" -ForegroundColor Gray
Write-Host "‚Ä¢ transacao-pix-empresateste.md" -ForegroundColor Gray
Write-Host "‚Ä¢ historico-extrato-empresateste.md" -ForegroundColor Gray
Write-Host "‚Ä¢ RELATORIO_FINAL_TRILHA_INTEGRADA.md" -ForegroundColor Gray
